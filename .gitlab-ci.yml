stages:
  - install
  - lint
  - build
  - deploy

image: registry.gitlab.techfides.cz/tf-internal/docker-images/node:10

variables:
  npm_config_cache: "$CI_PROJECT_DIR/.npm"

install:
  stage: install
  cache:
    key: "$CI_BUILD_REF_NAME-$CI_PIPELINE_ID"
    paths:
      - node_modules/
  script:
    - npm ci --unsafe-perm=true
  tags:
    - docker

lint:
  stage: lint
  cache:
    key: "$CI_BUILD_REF_NAME-$CI_PIPELINE_ID"
    paths:
      - node_modules/
    policy: pull
  script:
    - npm run lint
  tags:
    - docker

.deploy:
  stage: deploy
  cache:
    key: "$CI_BUILD_REF_NAME-$CI_PIPELINE_ID"
    paths:
      - node_modules/
    policy: pull
  script:
    - cp .env.example .env
    - npm install --unsafe-perm=true
    - npm run build
    - rsync -rlEci -e "ssh" --delete --delay-updates --
      .nuxt app assets config constants database docs node_modules providers public resources start storage ace init_database.sh package.json server.js
      "$TARGET_USER@$TARGET_SERVER:$TARGET_SOURCES_PATH/"
    - ssh "$TARGET_USER@$TARGET_SERVER" sudo tf-projects-status-operations $TARGET_INSTANCE update
    - ssh "$TARGET_USER@$TARGET_SERVER" sudo tf-projects-status-operations $TARGET_INSTANCE restart
  tags:
    - docker

build:
  stage: build
  only:
    - develop
  image: docker:latest
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --build-arg CI_COMMIT_SHA=$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker rmi $(docker images --filter "label=server-builder=$CI_COMMIT_SHA" -q)
  tags:
    - docker

deploy:staging:
  stage: deploy
  only:
    - develop
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  script:
    - kubectl -n tf-erp-staging set image deployment/tf-hub tf-hub=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  environment:
    name: staging
    url: https://hub-staging.techfides.services
  dependencies: []
  tags:
    - docker

deploy:dev:
  extends: .deploy
  only:
    - develop
  variables:
    TARGET_SOURCES_PATH: $DEV_TARGET_SOURCES_PATH
    TARGET_INSTANCE: $DEV_TARGET_INSTANCE
  environment:
    name: dev
    url: https://dev.projects.status.techfides.cz/

deploy:production:
  extends: .deploy
  when: manual
  allow_failure: false
  only:
    - master
  variables:
    TARGET_SOURCES_PATH: $PRODUCTION_TARGET_SOURCES_PATH
    TARGET_INSTANCE: $PRODUCTION_TARGET_INSTANCE
  environment:
    name: production
    url: https://projects.status.techfides.cz/
